#!/bin/bash
set -euo pipefail

PATCH_FILE="vendor/modernc.org/sqlite/sqlite_patch.go"

cat >"$PATCH_FILE" <<EOF
// Patch: expose internal 'conn' as exported 'Conn' for serialization access
// NOTE: This file is auto-generated by patch_vendor.sh
package sqlite

import (
	"fmt"
	"unsafe"

	"modernc.org/libc"
	sqlite3 "modernc.org/sqlite/lib"
)

// Conn is an exported alias for the internal [sqlite.conn] type.
//
// It is exposed to allow access to serialization methods
// such as Serialize and Deserialize.
type Conn = conn

// DeserializeWithFlags restores the contents of the database connected via this
// Conn from the given serialized buffer. The buffer should be produced by a
// call to [Conn.Serialize].
//
// Do not use SQLITE_DESERIALIZE_FREEONCLOSE,
// as the buffer is managed by Go and must not be freed by SQLite.
func (c *Conn) DeserializeWithFlags(buf []byte, mFlags uint32) (err error) {
	bufLen := len(buf)
	pBuf := c.tls.Alloc(bufLen) // free will be done if it fails or on close, must not be freed here

	copy((*libc.RawMem)(unsafe.Pointer(pBuf))[:bufLen:bufLen], buf)

	zSchema := sqlite3.Xsqlite3_db_name(c.tls, c.db, 0)
	if zSchema == 0 {
		return fmt.Errorf("failed to get main db name")
	}

	rc := sqlite3.Xsqlite3_deserialize(c.tls, c.db, zSchema, pBuf, int64(bufLen), int64(bufLen), mFlags)
	if rc != sqlite3.SQLITE_OK {
		return c.errstr(rc)
	}
	return nil
}
EOF

echo "[vendor-patch] Applied: $PATCH_FILE"

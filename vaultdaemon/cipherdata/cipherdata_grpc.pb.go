// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: cipherdata/cipherdata.proto

package cipherdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SessionHandler_Login_FullMethodName      = "/cipherdata.SessionHandler/Login"
	SessionHandler_GetSession_FullMethodName = "/cipherdata.SessionHandler/GetSession"
	SessionHandler_Logout_FullMethodName     = "/cipherdata.SessionHandler/Logout"
)

// SessionHandlerClient is the client API for SessionHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SessionHandler provides login/logout and session
// state operations for vault cipher data.
type SessionHandlerClient interface {
	// Login saves cipher data for a vault path.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetSession retrieves cipher data for a vault path.
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*CipherData, error)
	// Logout clears stored cipher data for a vault path.
	Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type sessionHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionHandlerClient(cc grpc.ClientConnInterface) SessionHandlerClient {
	return &sessionHandlerClient{cc}
}

func (c *sessionHandlerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SessionHandler_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionHandlerClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*CipherData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CipherData)
	err := c.cc.Invoke(ctx, SessionHandler_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionHandlerClient) Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SessionHandler_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionHandlerServer is the server API for SessionHandler service.
// All implementations must embed UnimplementedSessionHandlerServer
// for forward compatibility.
//
// SessionHandler provides login/logout and session
// state operations for vault cipher data.
type SessionHandlerServer interface {
	// Login saves cipher data for a vault path.
	Login(context.Context, *LoginRequest) (*Empty, error)
	// GetSession retrieves cipher data for a vault path.
	GetSession(context.Context, *SessionRequest) (*CipherData, error)
	// Logout clears stored cipher data for a vault path.
	Logout(context.Context, *SessionRequest) (*Empty, error)
	mustEmbedUnimplementedSessionHandlerServer()
}

// UnimplementedSessionHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionHandlerServer struct{}

func (UnimplementedSessionHandlerServer) Login(context.Context, *LoginRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSessionHandlerServer) GetSession(context.Context, *SessionRequest) (*CipherData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionHandlerServer) Logout(context.Context, *SessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSessionHandlerServer) mustEmbedUnimplementedSessionHandlerServer() {}
func (UnimplementedSessionHandlerServer) testEmbeddedByValue()                        {}

// UnsafeSessionHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionHandlerServer will
// result in compilation errors.
type UnsafeSessionHandlerServer interface {
	mustEmbedUnimplementedSessionHandlerServer()
}

func RegisterSessionHandlerServer(s grpc.ServiceRegistrar, srv SessionHandlerServer) {
	// If the following call pancis, it indicates UnimplementedSessionHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SessionHandler_ServiceDesc, srv)
}

func _SessionHandler_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionHandlerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionHandler_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionHandlerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionHandler_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionHandlerServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionHandler_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionHandlerServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionHandler_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionHandlerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionHandler_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionHandlerServer).Logout(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionHandler_ServiceDesc is the grpc.ServiceDesc for SessionHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cipherdata.SessionHandler",
	HandlerType: (*SessionHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SessionHandler_Login_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SessionHandler_GetSession_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SessionHandler_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cipherdata/cipherdata.proto",
}
